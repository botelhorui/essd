package pt.tecnico.bubbledocs.domain;

class BubbleDocs{
	int genId;
}

class User{
	String username;
	String password;
	String name;
}

class Session{
	LocalTime lastAccess;
	String token;
}

class SheetAccess{
}

class SpreadSheet{
	int id;
	String name;
	DateTime creationDate;
	int lines;
	int columns;
}

class Cell{
	int line;
	int column;
	boolean isProtected;
}

class Content{
}

class LiteralContent extends Content{
	int value;
}

class ReferenceContent extends Content{
}

class FunctionContent extends Content{
}

class BinaryFunction extends FunctionContent{
}

class BFAdd extends BinaryFunction{
}

class BFSub extends BinaryFunction{
}

class BFMul extends BinaryFunction{
}

class BFDiv extends BinaryFunction{
}

class Argument{
}

class LiteralArgument extends Argument{
	int value;
}

class ReferenceArgument extends Argument{
}


relation DomainRootHasBubbleDocs{
	.pt.ist.fenixframework.DomainRoot playsRole root{multiplicity 0..1;}
	BubbleDocs playsRole bubbleDocs {multiplicity 0..1;}
}

relation BubbleDocsContainsUsers{
	BubbleDocs playsRole bubbleDocs{multiplicity 1;}
	User playsRole user{multiplicity 0..*;}
}

relation UserHasSession{
	User playsRole user{multiplicity 1;}
	Session playsRole session{multiplicity 0..1;}
}

relation BubbleDocsContainsSpreadSheet{
	BubbleDocs playsRole bubbleDocs{multiplicity 1;}
	SpreadSheet playsRole spreadSheet{multiplicity 0..*;}
}


relation SpreadSheetHasSheetAccess{
	SpreadSheet playsRole spreadSheet{multiplicity 1;}
	SheetAccess playsRole sheetAccess{multiplicity 1;}
}

relation UserOwnedSheets{
	User playsRole owner{multiplicity 1;}
	SpreadSheet playsRole ownedSpread{multiplicity 0..*;}
}

relation UserCanReadSpreadSheet{
	User playsRole readerUser{multiplicity 0..*;}
	SpreadSheet playsRole readableSpread{multiplicity 0..*;}
}

relation UserCanWriteSpreadSheet{
	User playsRole writerUser{multiplicity 0..*;}
	SpreadSheet playsRole writableSpread{multiplicity 0..*;}
}

relation SheetAccessHasUser{
	SheetAccess playsRole sheetAccess{multiplicity 0..*;}
	User playsRole user{multiplicity 1;}
}

relation SpreadSheetContainsCell{
	SpreadSheet playsRole spreadSheet{multiplicity 1;}
	Cell playsRole cell{multiplicity 0..*;}
}

relation CellContainsContent{
	Cell playsRole cell{multiplicity 1;}
	Content playsRole content{multiplicity 0..1;}
}

relation BinaryFunctionContainsLeftArgument{
	BinaryFunction playsRole leftBinaryFunction{multiplicity 1;}
	Argument playsRole leftArgument{multiplicity 1;}
}

relation BinaryFunctionContainsRightArgument{
	BinaryFunction playsRole rightBinaryFunction{multiplicity 1;}
	Argument playsRole rightArgument{multiplicity 1;}
}

relation ReferenceContentHasCell{
	ReferenceContent playsRole referenceContent{multiplicity 0..*;}
	Cell playsRole referenceCell{multiplicity 1;}
}

relation ReferenceArgumentHasCell{
	ReferenceArgument playsRole referenceArgument{multiplicity 0..*;}
	Cell playsRole reference{multiplicity 1;}
}
