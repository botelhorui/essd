package pt.ulisboa.tecnico.sdis.id.ws.cli;

import javax.xml.registry.JAXRException;
import javax.xml.ws.*;

import java.util.Map;

import example.ws.uddi.UDDINaming;
import pt.ulisboa.tecnico.sdis.id.ws.*; // classes generated from WSDL

/**
 *  SD-Id client.
 *
 *  Adds easier endpoint address configuration
 *  to the PortType generated by wsimport.
 *
 *  tried to extended to add UDDI lookup capability.
 */

public class SDIdClient implements SDId {

	/** WS service */
	SDId_Service service = null;
	/** WS port (interface) */
	SDId port = null;

	/** constructor with provided web service URL 
	 * @throws JAXRException */
	public SDIdClient(String uddiURL, String wsName) throws SDIdClientException, JAXRException{
		UDDINaming uddiNaming = new UDDINaming(uddiURL);
		String endpointAddress = uddiNaming.lookup(wsName);

		if (endpointAddress == null) {
			throw new SDIdClientException("Couldn't find "+wsName+" Web Service at UDDI.");
		}

		service = new SDId_Service();
		port = service.getSDIdImplPort();

		System.out.println("Setting endpoint address ...");
		System.out.println(endpointAddress);
		BindingProvider bindingProvider = (BindingProvider) port;
		Map<String, Object> requestContext = bindingProvider.getRequestContext();
		requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress);
	}


	// SDId webservice
	
	public void createUser(String userId, String emailAddress)
			throws EmailAlreadyExists_Exception, InvalidEmail_Exception,
			InvalidUser_Exception, UserAlreadyExists_Exception{
		port.createUser(userId, emailAddress);
	}
	
	public void renewPassword(String userId)
	        throws UserDoesNotExist_Exception{
		port.renewPassword(userId);
	}
	
	public void removeUser(String userId)
			throws UserDoesNotExist_Exception{
		port.removeUser(userId);
	}
	
	public byte[] requestAuthentication(String userId, byte[] reserved)
	        throws AuthReqFailed_Exception{
		return port.requestAuthentication(userId, reserved);
	}

}