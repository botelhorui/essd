package pt.ulisboa.tecnico.sdis.store.ws.cli;

import java.util.List;
import java.util.Map;

import javax.xml.registry.JAXRException;
import javax.xml.ws.*;

import uddi.UDDINaming;
import pt.ulisboa.tecnico.sdis.store.ws.*; // classes generated from WSDL


/**
 *  SDStore client.
 *
 *  Adds easier endpoint address configuration
 *  to the PortType generated by wsimport.
 *
 *  TODO Could also be extended to add UDDI lookup capability.
 */
public class SDStoreClient implements SDStore {

	/** WS service */
	SDStore_Service service = null;

	/** WS port (interface) */
	SDStore port = null;

	/** constructor with provided web service URL 
	 * @throws JAXRException */
	public SDStoreClient(String uddiURL, String wsName) throws SDStoreClientException, JAXRException {
		UDDINaming uddiNaming = new UDDINaming(uddiURL);
		String endpointAddress = uddiNaming.lookup(wsName);
		if (endpointAddress == null) {
			throw new SDStoreClientException(String.format("Couldn't find '%s' Web Service at uddi",wsName));
        }
		
		service = new SDStore_Service();
		port = service.getSDStoreImplPort();

		System.out.println("Setting endpoint address ...");
		System.out.println(endpointAddress);
		BindingProvider bindingProvider = (BindingProvider) port;
		Map<String, Object> requestContext = bindingProvider.getRequestContext();
		requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointAddress);
	}


	// SDStore webservice
	@Override
	public void createDoc(DocUserPair docUserPair)
			throws DocAlreadyExists_Exception {
		port.createDoc(docUserPair);

	}
	@Override
	public List<String> listDocs(String userId)
			throws UserDoesNotExist_Exception {
		
		return port.listDocs(userId);
	}
	@Override
	public void store(DocUserPair docUserPair, byte[] contents)
			throws CapacityExceeded_Exception, DocDoesNotExist_Exception,
			UserDoesNotExist_Exception {
		port.store(docUserPair, contents);

	}
	
	@Override
	public byte[] load(DocUserPair docUserPair)
			throws DocDoesNotExist_Exception, UserDoesNotExist_Exception {
		
		return port.load(docUserPair);
	}

}
